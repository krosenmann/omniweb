Building a tree
===============


@<Build tree@> = lisp

@


Rectangle epxpansion
--------------------

Chunk can be used in different places, so information about
indentation doesn't bound to chunk itself. Moreover, it used only once
on chunk expansion. 

For expansion we don't need whole chunk info. Code itself is enough.

@warning Context used only for indentation!
@todo Реализовать макрос warning
@todo Ловить, если перед чанком есть что-то кроме пробелов.

@<Rectangle expansion@> = lisp
(defun insertion-context (code-line)
  (multiple-value-bind (start end) (ppcre:scan +chunk-name+ code-line)
    (list (make-string start :initial-element #\Space)
          (subseq code-line end))))
@


Now, for every line of code in chunk, read the context and apply it to
expanded lines.


@todo Сделать добавление контекста к хвосту списка
@todo Реализовать макрос @@todo
@todo Из всех @todo генерировать "Список предлагаемых доработок" или
что-то в таком духе. Т.е складывать все тудухи в одно место


@<Rectangle expansion@> =+ lisp

(defun read-chunk-code (chunk-name)
  (code (gethash chunk-name *chunks*)))


(defun push-into-context (context code)
  (mapcar 
   #'(lambda (line) (concatenate 'string (car context) line))
   code))

(defun expand-chunk (code-line)
  (let ((context (insertion-context code-line)))
    (ppcre:register-groups-bind (chunk-name)
      (+chunk-name+ code-line)
      (push-into-context context (read-chunk-code chunk-name)))
    ))

(defun construct-code (code)
    (mapcar  #'(lambda (code-line)
                 (if (not (ppcre:scan +chunk-name+ code-line))
                     code-line
                     (construct-code (expand-chunk code-line))))
             code))
@

