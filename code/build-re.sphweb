Regexp definition and build
===========================

Sphinxweb use regexps for parsing. One regexp can be used in several
places and also be a part of another regexp.

Regexps compiles on definition. You can also concatenate one regexp
whit another like a regular strings, but a result will be a scanner,
not a string.

Compiled regexps unmutable.  Define it once and use forever.

@<re ops@> = lisp
@<String dump of regexp@>

@<Define regexp@>

@<RE concatenation@>
@

How concatenate regexps?
------------------------

``cl-ppcre`` doesn't have any mechanism  for constructing scanner from
scanners. (I'm not entirelly sure about that, but don't find any
example in documentation. It's make sence -- we have no one posibility
for changing already compiled regexps)

So, for concat of two regexps whe need to concatenate *strings*
representation of given regexp and compile it. All happens in the
shadows. User think he just add one regexp to other.

In these scheme we can concatenate only already defined
scanners. E.g. ``re-concat`` takes **symbols** but not scanners
itself. So we can't use constructions like

.. code:: lisp

   (re-concat (create-scanner "<restring>") (create-scanner "<restring2>"))


And for God sake **NEVER** try to use like this:

.. code:: lisp
          (reconcat (defscanner x "x.?"))


@<RE concatenation@> = lisp
(defun re-concat (&rest scanners)
  (apply #'concatenate 'string 
               (mapcar #'(lambda (sym) (re-str (symbol-name sym)))
                    scanners)))
@

Representation of re
^^^^^^^^^^^^^^^^^^^^

Actually, we need to store both of compiled regexp and re-string.
Strings stored in hash-table with symbol names as a keys.

@<String dump of regexp@> = lisp
(defparameter *re-storage* (make-hash-table :test 'eq))


(defun dump-re-str (name re-str)
  (let ((re-place (gethash name *re-storage*)))
    (when re-place
      (error (format 'nil "Regexp with name \"~A\" already defined!~%" name)))
    (setf (gethash name *re-storage*) re-str)))


(defun re-str (key)
  (gethash key *re-storage*))
@


So, regexp definition must be a macro that hides two operation
(compilation and dump) inside it's own body.


@<Define regexp@> = lisp

(defmacro defscanner  (name re-str)
    `(progn
       (dump-re-str (symbol-name ',name) ,re-str)
       (defconstant ,name (ppcre:create-scanner ,re-str)))
  )

@
